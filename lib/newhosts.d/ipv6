#!/usr/bin/perl -CSDAL

use warnings; 
use strict;
use IServ::DB;
use List::MoreUtils qw(uniq);
use NetAddr::MAC;
use Path::Tiny;
use Stsbl::IServ::Net::IPv6;
use Time::HiRes qw(gettimeofday tv_interval);

my $fn_clients = "/var/lib/iserv/ipv6-support/dhcpy6d/clients.conf";
my $fn_all_macs = "/var/lib/iserv/ipv6-support/ipset/all.d/ipv6-support";

sub print_time($$)
{
  my ($mod, $time) = @_;
  printf "$mod: %.0fms\n", tv_interval($time) * 1000;
}

sub write_file_if_modified($$)
{
  my ($fn, $content) = @_;
  my $path = path $fn;

  do {
    $path->spew_utf8($content);
    return 1;
  } if $path->slurp_utf8 ne $content;

  return 0;
}

sub format_def(%)
{
  my (%def) = @_;
  my @ret;

  push @ret, "[" . lc($def{hostname}) . "]";

  for (sort keys %def)
  {
    if (ref $def{$_} eq "ARRAY")
    {
      push @ret, "$_ = " . join " ", uniq @{ $def{$_} };
    }
    else
    {
      push @ret, "$_ = " . $def{$_};
    }
  }

  push @ret, ("", "");

  @ret;
}

# dhcp
{
  my $moduletime = [gettimeofday];
  my @content;
  my %defs;
  my %hosts = IServ::DB::SelectAll_Hash
      "SELECT v6.id, h.Name, h.MAC, v6.ipv6_iid, v6.interface FROM ".
      "host_ipv6 v6 LEFT JOIN hosts h ON h.id = v6.host_id";
  my $out;
  my %prefixes;
  
  for (uniq split /\n/, qx(netquery6 -gul "nic\tprefix\tlength"))
  {
    my ($nic, $prefix, $length) = split /\t/;
    push @{ $prefixes{$nic} }, [$prefix, $length];
  }

  for (sort keys %hosts)
  {
    my $mac = $hosts{$_}{mac};
    next unless $mac;

    my $mac_converter = new NetAddr::MAC $mac;
 
    unless (exists $defs{$mac})
    {
      $defs{$mac}{class} = "default_" . $hosts{$_}{interface};
      $defs{$mac}{hostname} = $hosts{$_}{name};
      $defs{$mac}{mac} = $mac;
    }

    for my $net (@{ $prefixes{ $hosts{$_}{interface} } // [] })
    {
      my @net = @{ $net };

      # We can only handle EUI-64 compliant networks now
      next if $net[1] ne "64";

      push @{ $defs{$mac}{address} },
          join_prefix_and_suffix($net[0], $net[1], $hosts{$_}{ipv6_iid}, 64);
    }

    for my $net (@{ $prefixes{ $hosts{$_}{interface} } // [] })
    {
      my @net = @{ $net };

      # We can only handle EUI-64 compliant networks now
      next if $net[1] ne "64";

      push @{ $defs{$mac}{address} },
          join_prefix_and_suffix($net[0], $net[1], "::" . as_ipv6_suffix $mac_converter, 64);
    }

    my @addresses;
    push @{ $defs{$mac}{address} }, @addresses;
  }

  for (sort keys %defs)
  {
    push @content, format_def %{ $defs{$_} };
  }

  if (write_file_if_modified $fn_clients, join "\n", @content)
  {
    print "Restarting dhcp server ...\n";
    system "systemctl", "try-restart", "dhcpy6d.service";
  }

  print_time("update dhcp", $moduletime);
}

# known MAC ipset
{
  my $moduletime = [gettimeofday];
  my @macs = map { uc "$_\n" } IServ::DB::SelectCol "SELECT Mac FROM hosts WHERE Mac IS NOT NULL ORDER BY Mac";

  path($fn_all_macs)->spew_utf8(@macs);
  system "chkipsets", "-r", "-q", "iserv-ipv6-support-all";

  print_time("update known macs", $moduletime);
}
