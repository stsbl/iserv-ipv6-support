#!/usr/bin/perl -T -CSDAL

use warnings;
use strict;
use File::Slurp::Unicode;
use IServ::Act;
use IServ::Conf;
use IServ::DB;
use IServ::Tools;
use IServ::Valid;
use JSON;
use LWP::UserAgent;
use URI::Encode qw(uri_encode);

my $username;
my $timeout_connect = 30;
my $timeout_request = 60;

my $fn_oauth = "/var/lib/iserv/auth/oauth-client/client.json";
my $fn_session_start_code_secret = "/var/lib/iserv/auth/session_start_code/api.secret";
my $url_sso = sprintf "https://ipv4.%s%s?sso=", $conf->{Domain}, $conf->{PortalBasePath};

if (defined $ENV{SUDO_USER})
{
  $username = IServ::Valid::User $ENV{SUDO_USER};
}
else
{
  die "no user in environment";
}

undef %ENV;

sub get_uuid_for_act($)
{
  my ($act) = @_;

  eval {
    my %user = IServ::Tools::get_user($act);

    return $user{"uuid"};
  };
}

my $user_uuid = get_uuid_for_act $username;

my $json = JSON->new->ascii->allow_nonref;
my $user_agent = LWP::UserAgent->new(timeout => 3, agent => 'sso_login ');  # Space behind agent appends default UA string
my $oauth_client_config = $json->decode(scalar read_file $fn_oauth);
my $session_start_code_secret = scalar read_file $fn_session_start_code_secret;

my $iserv_auth_base_uri = 'http://127.0.0.1' . $conf->{'PortalBasePath'} . '/auth';

##
# Fetches a session start code from iserv-auth
#
sub get_sso_token()
{
  my $url = $iserv_auth_base_uri . '/api/v1/user/' . $user_uuid . '/session-start-code';
  my $response = $user_agent->post($url, {
      client_id                 => $oauth_client_config->{publicId},
      client_secret             => $oauth_client_config->{secret},
      session_start_code_secret => $session_start_code_secret,
      admin                     => 0
  });

  if ($response->code != 201)
  {
    die sprintf("unsuccessful api response. status code: %s\n", $response->code);
  }

  my $result = eval { $json->decode($response->content); };

  if (!defined $result or $result eq '')
  {
    die "invalid json in api response\n";
  }

  return ($result->{id}, $result->{code});
}

my (undef, $sso_token) = get_sso_token();

printf "%s%s:%s\n", $url_sso, uri_encode($username, { encode_reserved => 1 } ), uri_encode($sso_token, { encode_reserved => 1 } );
